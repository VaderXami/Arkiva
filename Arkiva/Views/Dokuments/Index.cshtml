@model IEnumerable<Arkiva.Models.Dokument>
@{
    var url = Context.Request.Url.ToString();
    string[] tmp = url.Split('=');

    var id = Context.Request.Url;
    string[] str = id.ToString().Split('=');

    ArkivaDBContext db = new ArkivaDBContext();

    var tmpp = 0;

    if (tmp[1].Contains("&search"))
    {
        string[] nId = tmp[1].Split('&');
        tmpp = nId[0].AsInt();
    }
    else
    {
        tmpp = tmp[1].AsInt();
    }

    var list = db.LlojiDokumentit.Where(s => s.Id == tmpp).Select(i => i.InspektimId);

    if (!list.Any())
    {
        Response.Redirect("PageNotFound");
    }

    foreach (var tt in list)
    {
        ViewBag.Id = tt;
    }

    var inspektimEmri = db.LlojiDokumentit.Where(x => x.Id == tmpp).Select(a => a.Emri);
    var subjektEmri = db.LlojiDokumentit.Where(x => x.Id == tmpp).Select(a => a.Inspektim.Emri);
    var nrInspektim = db.LlojiDokumentit.Where(x => x.Id == tmpp).Select(a => a.Inspektim.NrInspektimit);
    var subjektEmri2 = db.LlojiDokumentit.Where(x => x.Id == tmpp).Select(a => a.Inspektim.Subjekt.Emri);

    var SubjektId = db.LlojiDokumentit.Where(x => x.Id == tmpp).Select(a => a.Inspektim.SubjektId);

    string InspektimName1 = null;
    string SubjektName = null;
    int nrInspektim2 = 0;


    foreach (var dd in subjektEmri)
    {
        InspektimName1 = dd;
    }

    foreach (var no in nrInspektim)
    {
        nrInspektim2 = no;
    }

    foreach (var ee in subjektEmri2)
    {
        SubjektName = ee;
    }

    foreach (var newId in SubjektId)
    {
        ViewBag.newSubjektId = newId;
    }

    foreach (var item in inspektimEmri)
    {
        ViewBag.InspektimName = "Kategoria e dokumentit " + item + " për Inspektimin nga " + InspektimName1 + " e Subjektit " + SubjektName;

        <h4>@ViewBag.InspektimName</h4>
        <h4>
            <img src="~/Assets/folder.png" style="width: 30px; height: 30px" /> @Html.ActionLink("Subjektet e Regjistruara" + "/", "Index", "Subjekts", null, null) <img src="~/Assets/folder.png" style="width: 30px; height: 30px" /> @Html.ActionLink(SubjektName + "/", "Index", "Inspektims", new { SubjektId = ViewBag.newSubjektId }, null) <img src="~/Assets/folder.png" style="width: 30px; height: 30px" /> @Html.ActionLink(InspektimName1 + " " + nrInspektim2 + "/", "Index", "LlojiDokumentits", new { InspektimId = ViewBag.Id }, null) <img src="~/Assets/folder.png" style="width: 30px; height: 30px" /> @Html.ActionLink(item + "/", "Index", "Dokuments", new { LlojiDokumentitId = tmpp }, null)
        </h4>
    }

    ViewBag.Title = "Dokumente";
}


<div class="alert alert-success alert-dismissible fade in hide" role="alert" id="successId">
    <strong>Dokumenti u fshi me sukses!</strong>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<div class="alert alert-success alert-dismissible fade in hide" role="alert" id="uploadId">
    <strong>Dokumenti u ngarkua me sukses!</strong>
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>

<p>
    <div align="right">
        <h4>@ViewBag.No</h4>
        @Html.ActionLink("Ngarko Dokument", "Create", new { LlojiDokumentitId = tmpp }, new { @class = "btn btn-success", @style = "font-size: 12px" })
        @Html.ActionLink("Shko te Lloji", "Index", "LlojiDokumentits", new { InspektimId = ViewBag.Id }, new { @class = "btn btn-warning", @style = "font-size: 12px" })
    </div>
    @using (Html.BeginForm("Index", "Dokuments", FormMethod.Get))
    {
        <div>
            <p>
                <div class="form-inline">
                    @Html.Hidden("LlojiDokumentitId")
                    <div>
                        <div class="form-inline">
                            @Html.TextBox("search", null, new { @class = "form-control", @placeholder = "Kërko Dokument", @id = "myInput", autocomplete = "off", maxlength = "35" }) <br />
                            <div class="form-group form-group-sm">
                                <div class="col-md-8">
                                    @Html.TextBox("start", null, new { @class = "form-control datepicker", @autocomplete = "off", @id = "dateTime", @style = "text-align: right" })
                                </div>
                            </div>
                        </div>
                        <div style="margin-top: 20px">
                            <input type="submit" value="Kërko" class="btn btn-info" style="font-size: 12px" />
                            <button onclick="submitForms()" class="btn btn-secondary" style="width: 45px; height: 30px" data-toggle="tooltip" data-placement="top" title="Pastro fushat.">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-filter" viewBox="0 0 16 16">
                                    <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </p>
        </div>
    }
</p>
<style>
    table {
        width: 100%;
    }

    .td1 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        text-align: center;
        display: flex;
        width: 250px;
        height: 70px;
        margin-top: 0.8px;
        justify-content: left;
    }

    td {
        text-align: center;
        margin-top: 0.5px;
    }
</style>
<div style="padding-top: 30px"></div>
<table class="table table-secondary">
    <thead class="thead-dark">
        <tr>
            <th align="center" scope="col">
                @Html.DisplayNameFor(model => model.FileName)
            </th>
            <th scope="col"></th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Zyra)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.NrKutis)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Rafti)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Indeksimi)
            </th>
            <th align="right" scope="col">
                @Html.DisplayNameFor(model => model.Data)
            </th>
        </tr>
    </thead>

    @foreach (var item in Model)
    {
        <tr>
            <td scope="row" class="td1">
                @{ if (item.FileName.Contains(".pdf") || item.FileName.Contains(".ppt"))
                    {
                        <img src="~/Assets/pdfimg.svg.png" style="width: 30px; height: 30px" />
                    }
                    else if (item.FileName.Contains(".docx") || item.FileName.Contains(".doc"))
                    {
                        <img src="~/Assets/wordimg.svg.png" style="width: 30px; height: 30px" />
                    }
                    else if (item.FileName.Contains(".png") || item.FileName.Contains(".jpeg") || item.FileName.Contains(".jpg"))
                    {
                        <img src="~/Assets/imageicon.png" style="width: 30px; height: 30px" />
                    }
                    else if (item.FileName.Contains(".xlsx"))
                    {
                        <img src="~/Assets/excelicon.png" style="width: 30px; height: 30px" />
                    }
                    else if (item.FileName.Contains(".zip") || item.FileName.Contains(".rar"))
                    {
                        <img src="~/Assets/zipfile1.png" style="width: 30px; height: 30px" />
                    }
                    else
                    {
                        <img src="~/Assets/file.png" style="width: 30px; height: 30px" />
                    }
                }
                @Html.DisplayFor(modelItem => item.FileName, new { @style = "width:100px; word - wrap:break-word;" })
            </td>
            <td align="left" width="250px" scope="row">
                <div align="center">
                    @{ 
                        FileInfo fInfo = new FileInfo(item.FileName);

                        if (fInfo.Extension.Contains(".pdf"))
                        {
                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#exampleModal" style="font-size: 12px">Shiko</button>

                            <div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" id="exampleModal" style="width: 100%; height: 100%; max-width: none; margin: 0">
                                <div class="modal-dialog" role="document" style="width: 100%; height: 100%">
                                    <div class="modal-content modal-lg" style="height: 900px" align="center">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body" style="overflow-y: auto; overflow-x: auto">
                                            <embed src="@Url.Action("PreviewFilePDF", "Dokuments", new { id = item.Id})" style="width: 100%; height: 100%" type="application/pdf" />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-warning" data-dismiss="modal">Mbyll</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        if (item.FileName.Contains(".jpg"))
                        {
                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#exampleModal1" style="font-size: 12px">Shiko</button>

                            <div class="modal fade" id="exampleModal1" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content modal-lg">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body" style="overflow-y: auto; overflow-x: auto">
                                            @{
                                                var base64 = Convert.ToBase64String(item.FileContent);
                                                var pdfsrc = String.Format("data:image/jpg;base64,{0}", base64);
                                            }
                                            <embed src="@pdfsrc" style="width: 100%; height: 100%" />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-warning" data-dismiss="modal">Mbyll</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        }
                        if (fInfo.Extension.Contains(".png") || fInfo.Extension.Contains(".PNG"))
                        {
                            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#exampleModal2" style="font-size: 12px">Shiko</button>
                            <div class="modal fade" id="exampleModal2" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-lg" role="document" style="width: 1024px; height: 1024px">
                                    <div class="modal-content modal-lg">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body" style="width: 100%; height: 100%">
                                            @{
                                                var base64 = Convert.ToBase64String(item.FileContent);
                                                var pdfsrc = String.Format("data:image/png;base64,{0}", base64);
                                            }
                                            <embed src="@pdfsrc" style="width: 100%; height: 100%" />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-warning" data-dismiss="modal">Mbyll</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    @Html.ActionLink("Shkarko", "DownLoadFile", new { id = item.Id }, new { @class = "btn btn-primary", @style = "font-size: 12px" })
                    @Html.ActionLink("Fshi", "Delete", new { id = item.Id }, new { @class = "btn btn-danger", @style = "font-size: 12px" })
                </div>
            </td>
            <td scope="row">
                @Html.DisplayFor(modelItem => item.Zyra)
            </td>
            <td scope="row">
                @Html.DisplayFor(modelItem => item.NrKutis)
            </td>
            <td scope="row">
                @Html.DisplayFor(modelItem => item.Rafti)
            </td>
            <td scope="row">
                @Html.DisplayFor(modelItem => item.Indeksimi)
            </td>
            <td scope="row">
                @Html.DisplayFor(modelItem => item.Data)
            </td>
        </tr>
    }
</table>

<div class="text-danger">
    @ViewBag.Message
</div>
<br />


<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/ui-darkness/jquery-ui.css">
<link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet">

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

    <script>
                                    $(function () {
                                        $(".datepicker").datepicker($.datepicker.regional['sq'] = {
                                            closeText: 'mbylle',
                                            prevText: '&#x3c;Mbrapa',
                                            nextText: 'Përpara&#x3e;',
                                            currentText: 'sot',
                                            monthNames: ['Janar', 'Shkurt', 'Mars', 'Prill', 'Maj', 'Qershor',
                                                'Korrik', 'Gusht', 'Shtator', 'Tetor', 'Nëntor', 'Dhjetor'],
                                            monthNamesShort: ['Jan', 'Shk', 'Mar', 'Pri', 'Maj', 'Qer',
                                                'Kor', 'Gus', 'Sht', 'Tet', 'Nën', 'Dhj'],
                                            dayNames: ['E Diel', 'E Hënë', 'E Martë', 'E Mërkurë', 'E Enjte', 'E Premte', 'E Shtune'],
                                            dayNamesShort: ['Di', 'Hë', 'Ma', 'Më', 'En', 'Pr', 'Sh'],
                                            dayNamesMin: ['Di', 'Hë', 'Ma', 'Më', 'En', 'Pr', 'Sh'],
                                            weekHeader: 'Ja',
                                            firstDay: 1,
                                            isRTL: false,
                                            showMonthAfterYear: false,
                                            yearSuffix: '',
                                            changeMonth: true,
                                            changeYear: true,
                                            todayHighlight: true,
                                            autoclose: true,
                                            dateFormat: 'mm/dd/yy'
                                        });
                                    });

                                    $(function () {
                                        $.validator.addMethod('date',
                                            function (value, element) {
                                                if (this.optional(element)) {
                                                    return true;
                                                }
                                                var valid = true;
                                                try {
                                                    $.datepicker.parseDate('mm/dd/yy', value);
                                                }
                                                catch (err) {
                                                    valid = false;
                                                }
                                                return valid;
                                            });
                                        $(".datetype").datepicker({ dateFormat: 'mm/dd/yy' });
                                    });

                                    submitForms = function () {
                                        document.getElementById('myInput').value = '';
                                        document.getElementById('dateTime').value = '';
                                    }

                                    $(document).ready(function ()
                                    {
                                        var success = @((TempData["deleteMessage"] != null).ToString().ToLower());
                                        if (success == true)
                                        {
                                            document.getElementById('successId').classList.remove('hide');
                                        }
                                    })

                                    $(document).ready(function ()
                                    {
                                        var success = @((TempData["uploadMessage"] != null).ToString().ToLower());
                                        if (success == true)
                                        {
                                            document.getElementById('uploadId').classList.remove('hide');
                                        }
                                    })

                                    function getInputValue() {
                                        document.getElementById('alertId').classList.remove('hide')
                                    }
    </script>

    <style>
        .ui-datepicker .ui-datepicker-title select {
            color: #000;
        }
    </style>
}
